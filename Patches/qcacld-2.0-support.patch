From 11302e4ae3ef94048f1f73c1cd8d9d95d58a20ce Mon Sep 17 00:00:00 2001
From: Jaedon Shin <jaedon.shin@gmail.com>
Date: Mon, 13 Apr 2020 12:38:41 +0900
Subject: [PATCH] qcacld-2.0: Make driver compatiable with mainline kernel

Signed-off-by: Jaedon Shin <jaedon.shin@gmail.com>
---
 CORE/EPPING/src/epping_txrx.c                |  4 ++++
 CORE/HDD/inc/wlan_hdd_softap_tx_rx.h         |  4 ++++
 CORE/HDD/inc/wlan_hdd_tx_rx.h                |  4 ++++
 CORE/HDD/src/wlan_hdd_memdump.c              |  6 ++++++
 CORE/HDD/src/wlan_hdd_softap_tx_rx.c         |  4 ++++
 CORE/HDD/src/wlan_hdd_tx_rx.c                |  4 ++++
 CORE/SERVICES/COMMON/adf/adf_nbuf.c          |  4 ++++
 CORE/SERVICES/COMMON/adf/adf_os_time.h       |  4 ++++
 CORE/SERVICES/HIF/ath_procfs.c               |  7 +++++++
 CORE/SVC/src/logging/wlan_logging_sock_svc.c |  8 ++++++++
 CORE/UTILS/PKTLOG/linux_ac.c                 |  8 ++++++++
 CORE/VOSS/inc/vos_cnss.h                     | 20 ++++++++++++++++++++
 CORE/VOSS/inc/vos_timer.h                    |  4 ++++
 CORE/VOSS/src/vos_api.c                      |  7 +++++++
 CORE/VOSS/src/vos_packet.c                   |  8 ++++++++
 CORE/VOSS/src/vos_timer.c                    | 20 ++++++++++++++++++++
 Kbuild                                       |  5 ++---
 17 files changed, 118 insertions(+), 3 deletions(-)

diff --git a/CORE/EPPING/src/epping_txrx.c b/CORE/EPPING/src/epping_txrx.c
index d63a4cd8e7d3..10c1c35cb4db 100644
--- a/CORE/EPPING/src/epping_txrx.c
+++ b/CORE/EPPING/src/epping_txrx.c
@@ -143,7 +143,11 @@ end:
    return;
 }
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+void epping_tx_queue_timeout(struct net_device *dev, unsigned int txqueue)
+#else
 void epping_tx_queue_timeout(struct net_device *dev)
+#endif
 {
    epping_adapter_t *pAdapter;
 
diff --git a/CORE/HDD/inc/wlan_hdd_softap_tx_rx.h b/CORE/HDD/inc/wlan_hdd_softap_tx_rx.h
index ba2a5c5d79af..e04707cb8f7a 100644
--- a/CORE/HDD/inc/wlan_hdd_softap_tx_rx.h
+++ b/CORE/HDD/inc/wlan_hdd_softap_tx_rx.h
@@ -78,7 +78,11 @@ extern int hdd_softap_hard_start_xmit(struct sk_buff *skb, struct net_device *de
   @param dev : [in] pointer to Libra network device
   @return    : None
   ===========================================================================*/
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+extern void hdd_softap_tx_timeout(struct net_device *dev, unsigned int txqueue);
+#else
 extern void hdd_softap_tx_timeout(struct net_device *dev);
+#endif
 
 /**============================================================================
   @brief hdd_softap_stats() - Function registered with the Linux OS for
diff --git a/CORE/HDD/inc/wlan_hdd_tx_rx.h b/CORE/HDD/inc/wlan_hdd_tx_rx.h
index 2fd820c5886e..cb86442001b9 100644
--- a/CORE/HDD/inc/wlan_hdd_tx_rx.h
+++ b/CORE/HDD/inc/wlan_hdd_tx_rx.h
@@ -119,7 +119,11 @@ extern void hdd_drop_skb_list(hdd_adapter_t *adapter, struct sk_buff *skb,
   @param dev : [in] pointer to Libra network device
   @return    : None
   ===========================================================================*/
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+extern void hdd_tx_timeout(struct net_device *dev, unsigned int txqueue);
+#else
 extern void hdd_tx_timeout(struct net_device *dev);
+#endif
 
 /**============================================================================
   @brief hdd_stats() - Function registered with the Linux OS for
diff --git a/CORE/HDD/src/wlan_hdd_memdump.c b/CORE/HDD/src/wlan_hdd_memdump.c
index 09deb2e6105c..0e93b494e6e0 100644
--- a/CORE/HDD/src/wlan_hdd_memdump.c
+++ b/CORE/HDD/src/wlan_hdd_memdump.c
@@ -211,9 +211,15 @@ static ssize_t hdd_driver_memdump_read(struct file *file, char __user *buf,
  * This structure initialize the file operation handle for memory
  * dump feature
  */
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+static const struct proc_ops driver_dump_fops = {
+	proc_read: hdd_driver_memdump_read
+};
+#else
 static const struct file_operations driver_dump_fops = {
 	read: hdd_driver_memdump_read
 };
+#endif
 
 /**
  * hdd_driver_memdump_procfs_init() - Initialize procfs for driver memory dump
diff --git a/CORE/HDD/src/wlan_hdd_softap_tx_rx.c b/CORE/HDD/src/wlan_hdd_softap_tx_rx.c
index f0c069482f9c..d2d499276b9c 100644
--- a/CORE/HDD/src/wlan_hdd_softap_tx_rx.c
+++ b/CORE/HDD/src/wlan_hdd_softap_tx_rx.c
@@ -562,7 +562,11 @@ static void __hdd_softap_tx_timeout(struct net_device *dev)
  *
  * Return: none
  */
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+void hdd_softap_tx_timeout(struct net_device *dev, unsigned int txqueue)
+#else
 void hdd_softap_tx_timeout(struct net_device *dev)
+#endif
 {
 	vos_ssr_protect(__func__);
 	__hdd_softap_tx_timeout(dev);
diff --git a/CORE/HDD/src/wlan_hdd_tx_rx.c b/CORE/HDD/src/wlan_hdd_tx_rx.c
index 5fa42f629b60..677452b82f51 100644
--- a/CORE/HDD/src/wlan_hdd_tx_rx.c
+++ b/CORE/HDD/src/wlan_hdd_tx_rx.c
@@ -953,7 +953,11 @@ static void __hdd_tx_timeout(struct net_device *dev)
  *
  * Return: none
  */
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+void hdd_tx_timeout(struct net_device *dev, unsigned int txqueue)
+#else
 void hdd_tx_timeout(struct net_device *dev)
+#endif
 {
 	vos_ssr_protect(__func__);
 	__hdd_tx_timeout(dev);
diff --git a/CORE/SERVICES/COMMON/adf/adf_nbuf.c b/CORE/SERVICES/COMMON/adf/adf_nbuf.c
index e2c47286d5d2..fdfa67d4100e 100644
--- a/CORE/SERVICES/COMMON/adf/adf_nbuf.c
+++ b/CORE/SERVICES/COMMON/adf/adf_nbuf.c
@@ -2437,6 +2437,10 @@ uint16_t adf_nbuf_construct_radiotap(
  *
  * Return: none
  */
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))
+#endif
+
 void
 __adf_nbuf_validate_skb_cb(void)
 {
diff --git a/CORE/SERVICES/COMMON/adf/adf_os_time.h b/CORE/SERVICES/COMMON/adf/adf_os_time.h
index 6c92692a5bf3..e1dd4313803d 100644
--- a/CORE/SERVICES/COMMON/adf/adf_os_time.h
+++ b/CORE/SERVICES/COMMON/adf/adf_os_time.h
@@ -149,7 +149,11 @@ adf_os_msleep(int msecs)
 static inline a_uint64_t adf_get_boottime(void)
 {
 #ifdef CONFIG_CNSS
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+   struct timespec64 ts;
+#else
    struct timespec ts;
+#endif
 
    vos_get_boottime_ts(&ts);
 
diff --git a/CORE/SERVICES/HIF/ath_procfs.c b/CORE/SERVICES/HIF/ath_procfs.c
index 66c7374dc5c2..a9bd0e6b0543 100644
--- a/CORE/SERVICES/HIF/ath_procfs.c
+++ b/CORE/SERVICES/HIF/ath_procfs.c
@@ -167,10 +167,17 @@ static ssize_t ath_procfs_diag_write(struct file *file, const char __user *buf,
 	}
 }
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+static const struct proc_ops athdiag_fops = {
+	.proc_read = ath_procfs_diag_read,
+	.proc_write = ath_procfs_diag_write,
+};
+#else
 static const struct file_operations athdiag_fops = {
 	.read = ath_procfs_diag_read,
 	.write = ath_procfs_diag_write,
 };
+#endif
 
 /**
  *This function is called when the module is loaded
diff --git a/CORE/SVC/src/logging/wlan_logging_sock_svc.c b/CORE/SVC/src/logging/wlan_logging_sock_svc.c
index 2667c27e8fd8..7d4b4ebbf3e3 100644
--- a/CORE/SVC/src/logging/wlan_logging_sock_svc.c
+++ b/CORE/SVC/src/logging/wlan_logging_sock_svc.c
@@ -282,7 +282,11 @@ int wlan_log_to_user(VOS_TRACE_LEVEL log_level, char *to_be_sent, int length)
 	int total_log_len;
 	unsigned int *pfilled_length;
 	bool wake_up_thread = false;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+	struct __kernel_old_timeval tv;
+#else
 	struct timeval tv;
+#endif
 	struct rtc_time tm;
 	unsigned long local_time;
 	int radio;
@@ -313,7 +317,11 @@ int wlan_log_to_user(VOS_TRACE_LEVEL log_level, char *to_be_sent, int length)
 		vos_timer_get_timeval(&tv);
 		/* Convert rtc to local time */
 		local_time = (u32)(tv.tv_sec - (sys_tz.tz_minuteswest * 60));
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,7,0))
+		rtc_time64_to_tm(local_time, &tm);
+#else
 		rtc_time_to_tm(local_time, &tm);
+#endif
 		tlen = snprintf(tbuf, sizeof(tbuf),
 				"R%d: [%s][%02d:%02d:%02d.%06lu] ",
 				radio, current->comm, tm.tm_hour,
diff --git a/CORE/UTILS/PKTLOG/linux_ac.c b/CORE/UTILS/PKTLOG/linux_ac.c
index 0560288ac888..0f8210914953 100644
--- a/CORE/UTILS/PKTLOG/linux_ac.c
+++ b/CORE/UTILS/PKTLOG/linux_ac.c
@@ -87,11 +87,19 @@ static int pktlog_release(struct inode *i, struct file *f);
 static ssize_t pktlog_read(struct file *file, char *buf, size_t nbytes,
 			   loff_t * ppos);
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+static struct proc_ops pktlog_fops = {
+	proc_open:pktlog_open,
+	proc_release:pktlog_release,
+	proc_read:pktlog_read,
+};
+#else
 static struct file_operations pktlog_fops = {
 	open:pktlog_open,
 	release:pktlog_release,
 	read:pktlog_read,
 };
+#endif
 
 /*
  * Linux implementation of helper functions
diff --git a/CORE/VOSS/inc/vos_cnss.h b/CORE/VOSS/inc/vos_cnss.h
index af558212a0ac..754d3ddab7bd 100644
--- a/CORE/VOSS/inc/vos_cnss.h
+++ b/CORE/VOSS/inc/vos_cnss.h
@@ -157,10 +157,17 @@ static inline int vos_wlan_pm_control(bool vote)
 static inline void vos_lock_pm_sem(void) { return; }
 static inline void vos_release_pm_sem(void) { return; }
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+static inline void vos_get_boottime_ts(struct timespec64 *ts)
+{
+	ktime_get_ts64(ts);
+}
+#else
 static inline void vos_get_boottime_ts(struct timespec *ts)
 {
 	ktime_get_ts(ts);
 }
+#endif
 
 static inline void *vos_get_virt_ramdump_mem(struct device *dev,
 						unsigned long *size)
@@ -182,6 +189,15 @@ static inline int vos_set_cpus_allowed_ptr(struct task_struct *task, ulong cpu)
 }
 #endif
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,7,0))
+enum {
+       PM_QOS_RESERVED = 0,
+       PM_QOS_CPU_DMA_LATENCY,
+
+       /* insert new class ID */
+       PM_QOS_NUM_CLASSES,
+};
+#endif
 static inline void vos_device_self_recovery(struct device *dev) { return; }
 static inline void vos_request_pm_qos_type(int latency_type, u32 qos_val)
 {
@@ -373,7 +389,11 @@ static inline int vos_wlan_get_dfs_nol(void *info, u16 info_len)
 	return cnss_wlan_get_dfs_nol(info, info_len);
 }
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+static inline void vos_get_boottime_ts(struct timespec64 *ts)
+#else
 static inline void vos_get_boottime_ts(struct timespec *ts)
+#endif
 {
         cnss_get_boottime(ts);
 }
diff --git a/CORE/VOSS/inc/vos_timer.h b/CORE/VOSS/inc/vos_timer.h
index 5a452735c0a4..d22e4a73d04a 100644
--- a/CORE/VOSS/inc/vos_timer.h
+++ b/CORE/VOSS/inc/vos_timer.h
@@ -353,7 +353,11 @@ v_TIME_t vos_timer_get_system_time( v_VOID_t );
  *
  * Return: void
  */
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+void vos_timer_get_timeval(struct __kernel_old_timeval *tv);
+#else
 void vos_timer_get_timeval(struct timeval *tv);
+#endif
 
 /**
  * vos_system_ticks() - get system ticks
diff --git a/CORE/VOSS/src/vos_api.c b/CORE/VOSS/src/vos_api.c
index e32a4af1a22e..59f5df703667 100644
--- a/CORE/VOSS/src/vos_api.c
+++ b/CORE/VOSS/src/vos_api.c
@@ -3247,10 +3247,17 @@ void vos_svc_fw_shutdown_ind(struct device *dev)
 
 v_U64_t vos_get_monotonic_boottime_ns(void)
 {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+	struct timespec64 ts;
+
+	ktime_get_ts64(&ts);
+	return timespec64_to_ns(&ts);
+#else
 	struct timespec ts;
 
 	ktime_get_ts(&ts);
 	return timespec_to_ns(&ts);
+#endif
 }
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 3, 0))
diff --git a/CORE/VOSS/src/vos_packet.c b/CORE/VOSS/src/vos_packet.c
index 0c8209e9507c..03241c18d669 100644
--- a/CORE/VOSS/src/vos_packet.c
+++ b/CORE/VOSS/src/vos_packet.c
@@ -331,7 +331,11 @@ void vos_pkt_trace_buf_update
 )
 {
    v_U32_t slot;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+   struct __kernel_old_timeval tv;
+#else
    struct timeval tv;
+#endif
 
    VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_INFO,
              "%s %d, %s", __func__, __LINE__, event_string);
@@ -369,7 +373,11 @@ void vos_pkt_trace_dump_slot_buf(int slot)
 
 	local_time = (u32)(trace_buffer[slot].event_sec_time -
 		(sys_tz.tz_minuteswest * 60));
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,7,0))
+	rtc_time64_to_tm(local_time, &tm);
+#else
 	rtc_time_to_tm(local_time, &tm);
+#endif
 	VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
 		"%5d : [%02d:%02d:%02d.%06lu] : %s",
 		trace_buffer[slot].order,
diff --git a/CORE/VOSS/src/vos_timer.c b/CORE/VOSS/src/vos_timer.c
index 3adf1427b6cc..514747a9ab72 100644
--- a/CORE/VOSS/src/vos_timer.c
+++ b/CORE/VOSS/src/vos_timer.c
@@ -884,7 +884,11 @@ v_TIME_t vos_timer_get_system_time(void)
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0))
+void vos_timer_get_timeval(struct __kernel_old_timeval *tv)
+#else
 void vos_timer_get_timeval(struct timeval *tv)
+#endif
 {
 	struct timespec64 tv_spec;
 
@@ -913,7 +917,11 @@ unsigned long vos_get_time_of_the_day_ms(void)
 
 	ktime_get_real_ts64(&tv);
 	local_time = (unsigned long)(tv.tv_sec - (sys_tz.tz_minuteswest * 60));
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,7,0))
+	rtc_time64_to_tm(local_time, &tm);
+#else
 	rtc_time_to_tm(local_time, &tm);
+#endif
 
 	return (tm.tm_hour * 60 * 60 * 1000) +
 		(tm.tm_min * 60 * 1000) + (tm.tm_sec * 1000) +
@@ -930,7 +938,11 @@ unsigned long vos_get_time_of_the_day_ms(void)
 
 	local_time = (uint32_t)(tv.tv_sec -
 		(sys_tz.tz_minuteswest * 60));
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,7,0))
+	rtc_time64_to_tm(local_time, &tm);
+#else
 	rtc_time_to_tm(local_time, &tm);
+#endif
 	return ((tm.tm_hour * 60 * 60 * 1000) +
 		(tm.tm_min *60 * 1000) + (tm.tm_sec * 1000)+
 		(tv.tv_usec/1000));
@@ -948,7 +960,11 @@ void vos_get_time_of_the_day_in_hr_min_sec_usec(char *tbuf, int len)
 	ktime_get_real_ts64(&tv);
 	/* Convert rtc to local time */
 	local_time = (u32)(tv.tv_sec - (sys_tz.tz_minuteswest * 60));
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,7,0))
+	rtc_time64_to_tm(local_time, &tm);
+#else
 	rtc_time_to_tm(local_time, &tm);
+#endif
 	scnprintf(tbuf, len,
 		  "[%02d:%02d:%02d.%06lu]",
 		  tm.tm_hour, tm.tm_min, tm.tm_sec, tv.tv_nsec / 1000);
@@ -964,7 +980,11 @@ void vos_get_time_of_the_day_in_hr_min_sec_usec(char *tbuf, int len)
        do_gettimeofday(&tv);
        /* Convert rtc to local time */
        local_time = (u32)(tv.tv_sec - (sys_tz.tz_minuteswest * 60));
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,7,0))
+       rtc_time64_to_tm(local_time, &tm);
+#else
        rtc_time_to_tm(local_time, &tm);
+#endif
        snprintf(tbuf, len,
                "[%02d:%02d:%02d.%06lu] ",
                tm.tm_hour, tm.tm_min, tm.tm_sec, tv.tv_usec);
diff --git a/Kbuild b/Kbuild
index a3be8a3b5eaf..c3fbd1705f17 100644
--- a/Kbuild
+++ b/Kbuild
@@ -192,7 +192,7 @@ CONFIG_WLAN_FEATURE_SAE := y
 # Feature flags which are not (currently) configurable via Kconfig
 
 #Whether to build debug version
-BUILD_DEBUG_VERSION := 1
+BUILD_DEBUG_VERSION := 0
 
 #Enable this flag to build driver in diag version
 BUILD_DIAG_VERSION := 1
@@ -981,7 +981,7 @@ WDI_INC :=	$(WDI_CP_INC) \
 
 WCNSS_INC :=	-I$(WLAN_ROOT)/wcnss/inc
 
-LINUX_INC :=	-Iinclude/linux
+LINUX_INC :=	-I$(srctree)/include/linux
 
 INCS :=		$(HDD_INC) \
 		$(EPPING_INC) \
@@ -1057,7 +1057,6 @@ CDEFINES :=	-DANI_LITTLE_BYTE_ENDIAN \
 		-DWLAN_PERF \
 		-DPTT_SOCK_SVC_ENABLE \
 		-Wall\
-		-Werror\
 		-D__linux__ \
 		-DHAL_SELF_STA_PER_BSS=1 \
 		-DWLAN_FEATURE_VOWIFI_11R \
-- 
2.27.0

